---
alwaysApply: true
---

# Smart Contract Development Rules

You are developing smart contracts using Solidity and Foundry.

## Development Guidelines

### Project Structure

- Use Foundry framework for contract development
- Place interfaces in separate files with `I` prefix
- Use libraries for reusable mathematical and validation logic
- Implement proper deployment scripts in `/script/`

### Solidity Best Practices

- Use Solidity ^0.8.19 for all contracts
- Implement proper access control with OpenZeppelin's AccessControl
- Use ReentrancyGuard for all external functions that handle funds
- Apply SafeERC20 for all token interactions
- Use custom errors instead of string-based reverts
- Do not use Unicode characters in solidity files
- Always use forge script to deploy contracts

### Security Patterns

- Implement checks-effects-interactions pattern
- Use reentrancy guards on all external functions
- Validate all inputs with custom validation library
- Implement emergency stop mechanisms
- Use multi-signature for admin functions

### Gas Optimization

- Use packed structs where appropriate
- Implement efficient storage patterns
- Use events for off-chain data retrieval
- Optimize loops and avoid unbounded loops
- Use view functions for read-only operations

### Testing Strategy

- Write comprehensive unit tests for all functions
- Test edge cases and failure scenarios
- Use fuzzing for mathematical functions
- Test integration with external protocols
- Implement gas usage benchmarks

### Documentation

- Use NatSpec comments for all public functions
- Document complex mathematical operations
- Explain access control requirements
- Document integration requirements
- Include usage examples in comments
